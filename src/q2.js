/**
 * Create a set of function constructors to describe job titles and properties within a Company. 
 * We define the following function constructors :
 * a.	Employee as base object having two properties: “name”(empty string by default) and “department”(“general” by default). 
 * b.	Manager inherits from Employee and adds a new property called “reports” as Array. 
 * c.	WorkBee inherits from Employee and adds a new property called “projectName” as empty String. 
 * d.	SalesPerson inherits from WorkBee and overwrites department name to “sales”, project name to “internal”, plus adds a new property called “revenue” as Number.
 * e.	SoftwareEngineer inherits from WorkBee and overwrites department name to “tech”, project name to “App-ComplyAdvantage”, plus adds a new property called techSkills as Array. 
 * 
 * Hint: Please make use of Prototypes to inherit from a function constructor to another.
 */

/**
 * @description Employee constructor
 * @constructs Employee
 * @param {string} name - employee name
 * @access public
 * @example
 * new Employee('John Doe') 
 */ 
function Employee(name){
    /**
     * Name of the Employee
     * @name Employee#name
     * @type {string}
     */
    this.name = name || '';

    /**
     * Department of the Employee
     * @name Employee#department
     * @type {string}
     */
    this.department = 'General';
}

/**
 * @description Manager constructor
 * @constructs Manager
 * @extends Employee 
 * @param {string} name manager's name
 * @param {array} reports manager's reports
 * @example
 * new Manager("John Doe", [{name: "Q1", "statistics": 'abc'}, {name: "Q2", statistics: 'def'}]);
 */
function Manager(name, reports){
    Employee.call(this, name);

    /**
     * Reports of  the manager
     * @name Manager#reports
     * @type {array} 
     */
    this.reports = reports || [];
}
Manager.prototype = Object.create(Employee.prototype);
Manager.prototype.constructor = Manager;

/**
 * @description WorkBee constructor
 * @constructs WorkBee
 * @exports Employee
 * @param {string} name of the workbee
 * @example 
 * new WorkBee('John')
 */
function WorkBee(name){
    /**
     * Workbee's project name
     * @name WorkBee#projectName
     * @type {string}
     */
    this.projectName = '';

    Employee.call(this, name);
}
// Object.setPrototypeOf(WorkBee.prototype, Employee.prototype);
WorkBee.prototype = Object.create(Employee.prototype);
WorkBee.prototype.constructor = WorkBee;

/**
 * @description SalesPerson constructor
 * @constructs SalesPerson
 * @extends WorkBee
 * @param {string} name salesPerson's name
 * @param {number} revenue revenue generated by sales person
 * @example 
 * new SalesPerson("Michael T", 2540)
 */
function SalesPerson(name, revenue){
    WorkBee.call(this, name);

    /**
     * @name SalesPerson#revenue
     * @type {number}
     */
    this.revenue = revenue || 0;

    /**
     * @memberof WorkBee
     * @override
     */
    this.projectName = 'Internal';
    
    /**
     * @memberof Employee
     * @override
     */
    this.department = 'Sales';
}
SalesPerson.prototype = Object.create(WorkBee.prototype);
SalesPerson.prototype.constructor = SalesPerson;

/**
 * @description SoftwareEngineer constructor
 * @constructs SoftwareEngineer
 * @extends WorkBee
 * @param {string} name software engineer's name
 * @param {array} techSkills software engineer's skill set
 * @param {string} projectName software engineer's project
 * @example
 * new SoftwareEngineer("Joseph K. Ellis", ["Javascript", "HTML"], "App-ComplyAdvantage")
 */
function SoftwareEngineer(name, techSkills, projectName){
    WorkBee.call(this, name);

    /**
     * @name SoftwareEngineer#techSkills
     * @type {array}
     * @memberof SoftwareEngineer
     */
    this.techSkills = techSkills || [];

    /**
     * @memberof WorkBee
     * @override
     */
    this.projectName = projectName || 'App-ComplyAdvantage';
    
    /**
     * @memberof Employee
     * @override
     */
    this.department = 'Tech';
}
SoftwareEngineer.prototype = Object.create(WorkBee.prototype);
SoftwareEngineer.prototype.constructor = SoftwareEngineer;

/**
 * Example
 */
console.group('Manager John');
var John = new Manager("John Doe", [{name: "Q1", "statistics": '...'}, {name: "Q2", statistics: '...'}]);
console.log(John.department); // General
console.log(John.name) // John Doe
console.log(John.reports) // [{name: "Q1", "statistics": ...}, {name: "Q2", statistics: ...}]
console.groupEnd();

console.group('SalesPerson Michael');
var Michael = new SalesPerson("Michael T", 2540);
console.log(Michael); // SalesPerson
console.log(Michael.department); // sales
console.log(Michael.name) // Michael T
console.log(Michael.projectName); // internal
console.log(Michael.revenue); // 2540
console.groupEnd();

console.group('SoftwareEngineer Joseph');
var Joseph = new SoftwareEngineer("Joseph K. Ellis", ["Javascript", "HTML"], "App-ComplyAdvantage");
console.log(Joseph.department); // tech
console.log(Joseph.name) // Joseph K. Ellis
console.log(Joseph.projectName); // App-ComplyAdvantage
console.log(Joseph.techSkills); // ["Javascript", "HTML"]
console.groupEnd();